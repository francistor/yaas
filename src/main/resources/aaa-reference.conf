akka {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "INFO"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  
  actor {
	debug {
		receive = off
		lifecycle = on
	  }
  }
  
  http {
    server {
      remote-address-header = on
    }
  }
  
}

aaa {
	
	# Locations where to search for other configuration files
	# if "base" is not specified, the parent URL of this file is used as base
	# {"nameRegex": "Gx/(.*)", 	"locationType": "URL", "base": "http://localhost:8099/"},
	# {"nameRegex": "Gy/(.*)", 	"locationType": "URL", "base": "file:///etc/yaas/Gy/"},
	# {"nameRegex": "(.*)", 	"locationType": "resource"}
	
	configSearchRules = [
		{nameRegex: "(.*)",  locationType: "resource"}
	]
	
	radius {
		# Cleanup of the radius client request map will be performed at this interval
		clientMapIntervalMillis = 200
		
		# Interval in milliseconds the radius client request map is cleaned. Errors will be
		# taken into account after this amount of milliseconds
		clientMapTimeoutMillis = 5000
	}
	
	diameter {
		# Size of the queue of messages to be sent. If overflows, the just pushed message is silently discarded
		peerMessageQueueSize = 1000
		
		# Interval of execution of task to clean messages without a response
		cleanIntervalMillis = 250
		
		# Timeout for the CER Message
		cerTimeoutMillis = 10000
		
		# Timeout for responses
		responseTimeoutMillis = 5000
		
		# Time to try to re-connect to Peers if in "active" mode
		peerCheckTimeSeconds = 120
	}

	
	instrumentation {
		# Instrumentation bind Address. Use 0 to disable.
		bindAddress = "0.0.0.0"
		
		# Instrumentation port
		bindPort = 19000
		
		# Instrumentation timeout
		timeoutMillis = 2000
	}
	
	sessionsDatabase {
		# role may be "client", "server" or "none"
		# If client, the server may be another set of yaas instances in "server" role or standalone ignite servers with the configuration as in ignite-yaasdb-example.xml
		role = none
		
		# This configuration will be overriden by a ignite-yaasdb.xml file in the classpath/<instance> or classpath
		
		# Persistence properties
		persistenceEnabled = false
		storagePath = "c:/var/yaas/database"
		walPath = "c:/var/yaas/wal"
		walArchivePath = "c:/var/yaas/wal/archive"
		
		# IP addresses and ports where ignite servers are listening (format is "<ipaddress>:<port-range>,<ipaddress>:<port-range>")
		# If Kubernetes, use k8s:<namespace>:<kubernetes-service-name>
		igniteAddresses = "127.0.0.1:41000..41010"
		
		# IP address and port where this server is listening (format is "<ipaddress>:<port>")
		# Must be in the range specified in "igniteAddresses"
		localIgniteAddress = "127.0.0.1:41000"
		
		# Size of ignite memory in Megabytes
		memoryMegabytes = 256
		
		# BindAddress for REST queries provider
		bindAddress = 0.0.0.0
		
		# Port for REST queries provider
		bindPort = 19500
		
		# Expiration time for not modified entries
		expiryTimeHours = 48
		
		# IPAM Properties
		iam {
			# Configuration changes are reloaded every this seconds
			refreshLookupTableSeconds = 120
			
			# The Lease algorithm uses this bucket to search for ip addresses
			addressBucketSize = 32
			
			# Lease time
			leaseTimeSeconds = 600
			
			# Address is considered free after leaseTimeSeconds + graceTimeSeconds
			graceTimeSeconds = 1
		}
	}
}
